// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: challenges.proto

package challenges

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Challenges_CreateChallenge_FullMethodName       = "/challenges.Challenges/CreateChallenge"
	Challenges_AttendChallenge_FullMethodName       = "/challenges.Challenges/AttendChallenge"
	Challenges_UpdateChallengeResult_FullMethodName = "/challenges.Challenges/UpdateChallengeResult"
	Challenges_CreateEcoTips_FullMethodName         = "/challenges.Challenges/CreateEcoTips"
	Challenges_GetAllEcoTips_FullMethodName         = "/challenges.Challenges/GetAllEcoTips"
)

// ChallengesClient is the client API for Challenges service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChallengesClient interface {
	CreateChallenge(ctx context.Context, in *Challenge, opts ...grpc.CallOption) (*RespChallenge, error)
	AttendChallenge(ctx context.Context, in *Attend, opts ...grpc.CallOption) (*AttendResp, error)
	UpdateChallengeResult(ctx context.Context, in *ChallengeUpdate, opts ...grpc.CallOption) (*RespUpdate, error)
	CreateEcoTips(ctx context.Context, in *EcoTip, opts ...grpc.CallOption) (*RespEcoTip, error)
	GetAllEcoTips(ctx context.Context, in *FilterTip, opts ...grpc.CallOption) (*Tips, error)
}

type challengesClient struct {
	cc grpc.ClientConnInterface
}

func NewChallengesClient(cc grpc.ClientConnInterface) ChallengesClient {
	return &challengesClient{cc}
}

func (c *challengesClient) CreateChallenge(ctx context.Context, in *Challenge, opts ...grpc.CallOption) (*RespChallenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespChallenge)
	err := c.cc.Invoke(ctx, Challenges_CreateChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengesClient) AttendChallenge(ctx context.Context, in *Attend, opts ...grpc.CallOption) (*AttendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendResp)
	err := c.cc.Invoke(ctx, Challenges_AttendChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengesClient) UpdateChallengeResult(ctx context.Context, in *ChallengeUpdate, opts ...grpc.CallOption) (*RespUpdate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespUpdate)
	err := c.cc.Invoke(ctx, Challenges_UpdateChallengeResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengesClient) CreateEcoTips(ctx context.Context, in *EcoTip, opts ...grpc.CallOption) (*RespEcoTip, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespEcoTip)
	err := c.cc.Invoke(ctx, Challenges_CreateEcoTips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengesClient) GetAllEcoTips(ctx context.Context, in *FilterTip, opts ...grpc.CallOption) (*Tips, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tips)
	err := c.cc.Invoke(ctx, Challenges_GetAllEcoTips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengesServer is the server API for Challenges service.
// All implementations must embed UnimplementedChallengesServer
// for forward compatibility
type ChallengesServer interface {
	CreateChallenge(context.Context, *Challenge) (*RespChallenge, error)
	AttendChallenge(context.Context, *Attend) (*AttendResp, error)
	UpdateChallengeResult(context.Context, *ChallengeUpdate) (*RespUpdate, error)
	CreateEcoTips(context.Context, *EcoTip) (*RespEcoTip, error)
	GetAllEcoTips(context.Context, *FilterTip) (*Tips, error)
	mustEmbedUnimplementedChallengesServer()
}

// UnimplementedChallengesServer must be embedded to have forward compatible implementations.
type UnimplementedChallengesServer struct {
}

func (UnimplementedChallengesServer) CreateChallenge(context.Context, *Challenge) (*RespChallenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChallenge not implemented")
}
func (UnimplementedChallengesServer) AttendChallenge(context.Context, *Attend) (*AttendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttendChallenge not implemented")
}
func (UnimplementedChallengesServer) UpdateChallengeResult(context.Context, *ChallengeUpdate) (*RespUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChallengeResult not implemented")
}
func (UnimplementedChallengesServer) CreateEcoTips(context.Context, *EcoTip) (*RespEcoTip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEcoTips not implemented")
}
func (UnimplementedChallengesServer) GetAllEcoTips(context.Context, *FilterTip) (*Tips, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEcoTips not implemented")
}
func (UnimplementedChallengesServer) mustEmbedUnimplementedChallengesServer() {}

// UnsafeChallengesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChallengesServer will
// result in compilation errors.
type UnsafeChallengesServer interface {
	mustEmbedUnimplementedChallengesServer()
}

func RegisterChallengesServer(s grpc.ServiceRegistrar, srv ChallengesServer) {
	s.RegisterService(&Challenges_ServiceDesc, srv)
}

func _Challenges_CreateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Challenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengesServer).CreateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Challenges_CreateChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengesServer).CreateChallenge(ctx, req.(*Challenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Challenges_AttendChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengesServer).AttendChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Challenges_AttendChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengesServer).AttendChallenge(ctx, req.(*Attend))
	}
	return interceptor(ctx, in, info, handler)
}

func _Challenges_UpdateChallengeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengesServer).UpdateChallengeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Challenges_UpdateChallengeResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengesServer).UpdateChallengeResult(ctx, req.(*ChallengeUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Challenges_CreateEcoTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EcoTip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengesServer).CreateEcoTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Challenges_CreateEcoTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengesServer).CreateEcoTips(ctx, req.(*EcoTip))
	}
	return interceptor(ctx, in, info, handler)
}

func _Challenges_GetAllEcoTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterTip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengesServer).GetAllEcoTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Challenges_GetAllEcoTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengesServer).GetAllEcoTips(ctx, req.(*FilterTip))
	}
	return interceptor(ctx, in, info, handler)
}

// Challenges_ServiceDesc is the grpc.ServiceDesc for Challenges service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Challenges_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "challenges.Challenges",
	HandlerType: (*ChallengesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChallenge",
			Handler:    _Challenges_CreateChallenge_Handler,
		},
		{
			MethodName: "AttendChallenge",
			Handler:    _Challenges_AttendChallenge_Handler,
		},
		{
			MethodName: "UpdateChallengeResult",
			Handler:    _Challenges_UpdateChallengeResult_Handler,
		},
		{
			MethodName: "CreateEcoTips",
			Handler:    _Challenges_CreateEcoTips_Handler,
		},
		{
			MethodName: "GetAllEcoTips",
			Handler:    _Challenges_GetAllEcoTips_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "challenges.proto",
}
