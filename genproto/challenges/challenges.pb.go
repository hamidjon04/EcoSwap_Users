// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: challenges.proto

package challenges

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description  string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StartDate    string `protobuf:"bytes,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate      string `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
	RewardPoints int32  `protobuf:"varint,5,opt,name=rewardPoints,proto3" json:"rewardPoints,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{0}
}

func (x *Challenge) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Challenge) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Challenge) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Challenge) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Challenge) GetRewardPoints() int32 {
	if x != nil {
		return x.RewardPoints
	}
	return 0
}

type RespChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description  string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartDate    string `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate      string `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
	RewardPoints int32  `protobuf:"varint,6,opt,name=rewardPoints,proto3" json:"rewardPoints,omitempty"`
	CreatedAt    string `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *RespChallenge) Reset() {
	*x = RespChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespChallenge) ProtoMessage() {}

func (x *RespChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespChallenge.ProtoReflect.Descriptor instead.
func (*RespChallenge) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{1}
}

func (x *RespChallenge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RespChallenge) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RespChallenge) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RespChallenge) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *RespChallenge) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *RespChallenge) GetRewardPoints() int32 {
	if x != nil {
		return x.RewardPoints
	}
	return 0
}

func (x *RespChallenge) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type Attend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string `protobuf:"bytes,1,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
	UserIs      string `protobuf:"bytes,2,opt,name=userIs,proto3" json:"userIs,omitempty"`
}

func (x *Attend) Reset() {
	*x = Attend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attend) ProtoMessage() {}

func (x *Attend) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attend.ProtoReflect.Descriptor instead.
func (*Attend) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{2}
}

func (x *Attend) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *Attend) GetUserIs() string {
	if x != nil {
		return x.UserIs
	}
	return ""
}

type AttendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string `protobuf:"bytes,1,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	JoinedAt    string `protobuf:"bytes,4,opt,name=joinedAt,proto3" json:"joinedAt,omitempty"`
}

func (x *AttendResp) Reset() {
	*x = AttendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttendResp) ProtoMessage() {}

func (x *AttendResp) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttendResp.ProtoReflect.Descriptor instead.
func (*AttendResp) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{3}
}

func (x *AttendResp) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *AttendResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AttendResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AttendResp) GetJoinedAt() string {
	if x != nil {
		return x.JoinedAt
	}
	return ""
}

type ChallengeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId  string `protobuf:"bytes,1,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
	ResItemCount int32  `protobuf:"varint,2,opt,name=resItemCount,proto3" json:"resItemCount,omitempty"`
}

func (x *ChallengeUpdate) Reset() {
	*x = ChallengeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeUpdate) ProtoMessage() {}

func (x *ChallengeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeUpdate.ProtoReflect.Descriptor instead.
func (*ChallengeUpdate) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{4}
}

func (x *ChallengeUpdate) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *ChallengeUpdate) GetResItemCount() int32 {
	if x != nil {
		return x.ResItemCount
	}
	return 0
}

type RespUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId  string `protobuf:"bytes,1,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Status       string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ResItemCount int32  `protobuf:"varint,4,opt,name=resItemCount,proto3" json:"resItemCount,omitempty"`
	UpdatedAt    string `protobuf:"bytes,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *RespUpdate) Reset() {
	*x = RespUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespUpdate) ProtoMessage() {}

func (x *RespUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespUpdate.ProtoReflect.Descriptor instead.
func (*RespUpdate) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{5}
}

func (x *RespUpdate) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *RespUpdate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RespUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RespUpdate) GetResItemCount() int32 {
	if x != nil {
		return x.ResItemCount
	}
	return 0
}

func (x *RespUpdate) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type EcoTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EcoTip) Reset() {
	*x = EcoTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcoTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcoTip) ProtoMessage() {}

func (x *EcoTip) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcoTip.ProtoReflect.Descriptor instead.
func (*EcoTip) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{6}
}

func (x *EcoTip) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EcoTip) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type RespEcoTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	CreatedAt string `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *RespEcoTip) Reset() {
	*x = RespEcoTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespEcoTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespEcoTip) ProtoMessage() {}

func (x *RespEcoTip) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespEcoTip.ProtoReflect.Descriptor instead.
func (*RespEcoTip) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{7}
}

func (x *RespEcoTip) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RespEcoTip) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RespEcoTip) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RespEcoTip) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type FilterTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Limit  string `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset string `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *FilterTip) Reset() {
	*x = FilterTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTip) ProtoMessage() {}

func (x *FilterTip) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTip.ProtoReflect.Descriptor instead.
func (*FilterTip) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{8}
}

func (x *FilterTip) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FilterTip) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *FilterTip) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

type Tips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tips  []*RespEcoTip `protobuf:"bytes,1,rep,name=tips,proto3" json:"tips,omitempty"`
	Total int32         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page  int32         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit int32         `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Tips) Reset() {
	*x = Tips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenges_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tips) ProtoMessage() {}

func (x *Tips) ProtoReflect() protoreflect.Message {
	mi := &file_challenges_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tips.ProtoReflect.Descriptor instead.
func (*Tips) Descriptor() ([]byte, []int) {
	return file_challenges_proto_rawDescGZIP(), []int{9}
}

func (x *Tips) GetTips() []*RespEcoTip {
	if x != nil {
		return x.Tips
	}
	return nil
}

func (x *Tips) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Tips) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Tips) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_challenges_proto protoreflect.FileDescriptor

var file_challenges_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x9f,
	0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x42, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x73, 0x22, 0x7a, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa0, 0x01,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x38, 0x0a, 0x06, 0x45, 0x63, 0x6f, 0x54, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x70, 0x45, 0x63, 0x6f, 0x54, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4f, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x72, 0x0a, 0x04, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x2a, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x45,
	0x63, 0x6f, 0x54, 0x69, 0x70, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0xdf, 0x02, 0x0a, 0x0a,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x15, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x1a, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x63, 0x6f, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x2e, 0x45, 0x63, 0x6f, 0x54, 0x69, 0x70, 0x1a, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x45, 0x63, 0x6f, 0x54, 0x69, 0x70, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x63, 0x6f, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70, 0x1a, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x70, 0x73, 0x22, 0x00, 0x42, 0x15, 0x5a,
	0x13, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_challenges_proto_rawDescOnce sync.Once
	file_challenges_proto_rawDescData = file_challenges_proto_rawDesc
)

func file_challenges_proto_rawDescGZIP() []byte {
	file_challenges_proto_rawDescOnce.Do(func() {
		file_challenges_proto_rawDescData = protoimpl.X.CompressGZIP(file_challenges_proto_rawDescData)
	})
	return file_challenges_proto_rawDescData
}

var file_challenges_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_challenges_proto_goTypes = []any{
	(*Challenge)(nil),       // 0: challenges.Challenge
	(*RespChallenge)(nil),   // 1: challenges.RespChallenge
	(*Attend)(nil),          // 2: challenges.Attend
	(*AttendResp)(nil),      // 3: challenges.AttendResp
	(*ChallengeUpdate)(nil), // 4: challenges.ChallengeUpdate
	(*RespUpdate)(nil),      // 5: challenges.RespUpdate
	(*EcoTip)(nil),          // 6: challenges.EcoTip
	(*RespEcoTip)(nil),      // 7: challenges.RespEcoTip
	(*FilterTip)(nil),       // 8: challenges.FilterTip
	(*Tips)(nil),            // 9: challenges.Tips
}
var file_challenges_proto_depIdxs = []int32{
	7, // 0: challenges.Tips.tips:type_name -> challenges.RespEcoTip
	0, // 1: challenges.Challenges.CreateChallenge:input_type -> challenges.Challenge
	2, // 2: challenges.Challenges.AttendChallenge:input_type -> challenges.Attend
	4, // 3: challenges.Challenges.UpdateChallengeResult:input_type -> challenges.ChallengeUpdate
	6, // 4: challenges.Challenges.CreateEcoTips:input_type -> challenges.EcoTip
	8, // 5: challenges.Challenges.GetAllEcoTips:input_type -> challenges.FilterTip
	1, // 6: challenges.Challenges.CreateChallenge:output_type -> challenges.RespChallenge
	3, // 7: challenges.Challenges.AttendChallenge:output_type -> challenges.AttendResp
	5, // 8: challenges.Challenges.UpdateChallengeResult:output_type -> challenges.RespUpdate
	7, // 9: challenges.Challenges.CreateEcoTips:output_type -> challenges.RespEcoTip
	9, // 10: challenges.Challenges.GetAllEcoTips:output_type -> challenges.Tips
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_challenges_proto_init() }
func file_challenges_proto_init() {
	if File_challenges_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_challenges_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenges_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RespChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenges_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Attend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenges_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AttendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenges_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenges_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RespUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenges_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*EcoTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenges_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RespEcoTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenges_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FilterTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenges_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Tips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_challenges_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_challenges_proto_goTypes,
		DependencyIndexes: file_challenges_proto_depIdxs,
		MessageInfos:      file_challenges_proto_msgTypes,
	}.Build()
	File_challenges_proto = out.File
	file_challenges_proto_rawDesc = nil
	file_challenges_proto_goTypes = nil
	file_challenges_proto_depIdxs = nil
}
