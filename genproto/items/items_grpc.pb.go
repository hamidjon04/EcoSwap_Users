// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: items.proto

package items

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Items_CreateItem_FullMethodName     = "/items.Items/CreateItem"
	Items_UpdateItem_FullMethodName     = "/items.Items/UpdateItem"
	Items_DeleteItem_FullMethodName     = "/items.Items/DeleteItem"
	Items_GetItem_FullMethodName        = "/items.Items/GetItem"
	Items_SearchItems_FullMethodName    = "/items.Items/SearchItems"
	Items_GetAllItems_FullMethodName    = "/items.Items/GetAllItems"
	Items_CreateCategory_FullMethodName = "/items.Items/CreateCategory"
)

// ItemsClient is the client API for Items service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsClient interface {
	CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemResponce, error)
	UpdateItem(ctx context.Context, in *ItemUpdate, opts ...grpc.CallOption) (*UpdateResponse, error)
	DeleteItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*Status, error)
	GetItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*GetItemResp, error)
	SearchItems(ctx context.Context, in *FilterField, opts ...grpc.CallOption) (*AllItems, error)
	GetAllItems(ctx context.Context, in *Limit, opts ...grpc.CallOption) (*AllItems, error)
	CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryResponse, error)
}

type itemsClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsClient(cc grpc.ClientConnInterface) ItemsClient {
	return &itemsClient{cc}
}

func (c *itemsClient) CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponce)
	err := c.cc.Invoke(ctx, Items_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) UpdateItem(ctx context.Context, in *ItemUpdate, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, Items_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) DeleteItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Items_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*GetItemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResp)
	err := c.cc.Invoke(ctx, Items_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) SearchItems(ctx context.Context, in *FilterField, opts ...grpc.CallOption) (*AllItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllItems)
	err := c.cc.Invoke(ctx, Items_SearchItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetAllItems(ctx context.Context, in *Limit, opts ...grpc.CallOption) (*AllItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllItems)
	err := c.cc.Invoke(ctx, Items_GetAllItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, Items_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsServer is the server API for Items service.
// All implementations must embed UnimplementedItemsServer
// for forward compatibility
type ItemsServer interface {
	CreateItem(context.Context, *Item) (*ItemResponce, error)
	UpdateItem(context.Context, *ItemUpdate) (*UpdateResponse, error)
	DeleteItem(context.Context, *ItemId) (*Status, error)
	GetItem(context.Context, *ItemId) (*GetItemResp, error)
	SearchItems(context.Context, *FilterField) (*AllItems, error)
	GetAllItems(context.Context, *Limit) (*AllItems, error)
	CreateCategory(context.Context, *Category) (*CategoryResponse, error)
	mustEmbedUnimplementedItemsServer()
}

// UnimplementedItemsServer must be embedded to have forward compatible implementations.
type UnimplementedItemsServer struct {
}

func (UnimplementedItemsServer) CreateItem(context.Context, *Item) (*ItemResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemsServer) UpdateItem(context.Context, *ItemUpdate) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemsServer) DeleteItem(context.Context, *ItemId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemsServer) GetItem(context.Context, *ItemId) (*GetItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemsServer) SearchItems(context.Context, *FilterField) (*AllItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (UnimplementedItemsServer) GetAllItems(context.Context, *Limit) (*AllItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (UnimplementedItemsServer) CreateCategory(context.Context, *Category) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedItemsServer) mustEmbedUnimplementedItemsServer() {}

// UnsafeItemsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsServer will
// result in compilation errors.
type UnsafeItemsServer interface {
	mustEmbedUnimplementedItemsServer()
}

func RegisterItemsServer(s grpc.ServiceRegistrar, srv ItemsServer) {
	s.RegisterService(&Items_ServiceDesc, srv)
}

func _Items_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).UpdateItem(ctx, req.(*ItemUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).DeleteItem(ctx, req.(*ItemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItem(ctx, req.(*ItemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_SearchItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).SearchItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_SearchItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).SearchItems(ctx, req.(*FilterField))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Limit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetAllItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetAllItems(ctx, req.(*Limit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

// Items_ServiceDesc is the grpc.ServiceDesc for Items service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Items_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "items.Items",
	HandlerType: (*ItemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _Items_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _Items_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _Items_DeleteItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _Items_GetItem_Handler,
		},
		{
			MethodName: "SearchItems",
			Handler:    _Items_SearchItems_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _Items_GetAllItems_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Items_CreateCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "items.proto",
}
