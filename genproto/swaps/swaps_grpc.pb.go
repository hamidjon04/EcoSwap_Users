// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: swaps.proto

package swaps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Swaps_SendSwapRequest_FullMethodName      = "/swaps.Swaps/SendSwapRequest"
	Swaps_AdoptionSwapRequest_FullMethodName  = "/swaps.Swaps/AdoptionSwapRequest"
	Swaps_RejectionSwapRequest_FullMethodName = "/swaps.Swaps/RejectionSwapRequest"
	Swaps_GetAllSwapRequests_FullMethodName   = "/swaps.Swaps/GetAllSwapRequests"
)

// SwapsClient is the client API for Swaps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwapsClient interface {
	SendSwapRequest(ctx context.Context, in *SwapRequest, opts ...grpc.CallOption) (*SwapResponce, error)
	AdoptionSwapRequest(ctx context.Context, in *Reason, opts ...grpc.CallOption) (*Responce, error)
	RejectionSwapRequest(ctx context.Context, in *Reason, opts ...grpc.CallOption) (*Responce, error)
	GetAllSwapRequests(ctx context.Context, in *FilterField, opts ...grpc.CallOption) (*AllSwaps, error)
}

type swapsClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapsClient(cc grpc.ClientConnInterface) SwapsClient {
	return &swapsClient{cc}
}

func (c *swapsClient) SendSwapRequest(ctx context.Context, in *SwapRequest, opts ...grpc.CallOption) (*SwapResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapResponce)
	err := c.cc.Invoke(ctx, Swaps_SendSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapsClient) AdoptionSwapRequest(ctx context.Context, in *Reason, opts ...grpc.CallOption) (*Responce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Responce)
	err := c.cc.Invoke(ctx, Swaps_AdoptionSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapsClient) RejectionSwapRequest(ctx context.Context, in *Reason, opts ...grpc.CallOption) (*Responce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Responce)
	err := c.cc.Invoke(ctx, Swaps_RejectionSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapsClient) GetAllSwapRequests(ctx context.Context, in *FilterField, opts ...grpc.CallOption) (*AllSwaps, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllSwaps)
	err := c.cc.Invoke(ctx, Swaps_GetAllSwapRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwapsServer is the server API for Swaps service.
// All implementations must embed UnimplementedSwapsServer
// for forward compatibility
type SwapsServer interface {
	SendSwapRequest(context.Context, *SwapRequest) (*SwapResponce, error)
	AdoptionSwapRequest(context.Context, *Reason) (*Responce, error)
	RejectionSwapRequest(context.Context, *Reason) (*Responce, error)
	GetAllSwapRequests(context.Context, *FilterField) (*AllSwaps, error)
	mustEmbedUnimplementedSwapsServer()
}

// UnimplementedSwapsServer must be embedded to have forward compatible implementations.
type UnimplementedSwapsServer struct {
}

func (UnimplementedSwapsServer) SendSwapRequest(context.Context, *SwapRequest) (*SwapResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSwapRequest not implemented")
}
func (UnimplementedSwapsServer) AdoptionSwapRequest(context.Context, *Reason) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdoptionSwapRequest not implemented")
}
func (UnimplementedSwapsServer) RejectionSwapRequest(context.Context, *Reason) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectionSwapRequest not implemented")
}
func (UnimplementedSwapsServer) GetAllSwapRequests(context.Context, *FilterField) (*AllSwaps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSwapRequests not implemented")
}
func (UnimplementedSwapsServer) mustEmbedUnimplementedSwapsServer() {}

// UnsafeSwapsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwapsServer will
// result in compilation errors.
type UnsafeSwapsServer interface {
	mustEmbedUnimplementedSwapsServer()
}

func RegisterSwapsServer(s grpc.ServiceRegistrar, srv SwapsServer) {
	s.RegisterService(&Swaps_ServiceDesc, srv)
}

func _Swaps_SendSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapsServer).SendSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swaps_SendSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapsServer).SendSwapRequest(ctx, req.(*SwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swaps_AdoptionSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reason)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapsServer).AdoptionSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swaps_AdoptionSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapsServer).AdoptionSwapRequest(ctx, req.(*Reason))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swaps_RejectionSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reason)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapsServer).RejectionSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swaps_RejectionSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapsServer).RejectionSwapRequest(ctx, req.(*Reason))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swaps_GetAllSwapRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapsServer).GetAllSwapRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swaps_GetAllSwapRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapsServer).GetAllSwapRequests(ctx, req.(*FilterField))
	}
	return interceptor(ctx, in, info, handler)
}

// Swaps_ServiceDesc is the grpc.ServiceDesc for Swaps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Swaps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swaps.Swaps",
	HandlerType: (*SwapsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSwapRequest",
			Handler:    _Swaps_SendSwapRequest_Handler,
		},
		{
			MethodName: "AdoptionSwapRequest",
			Handler:    _Swaps_AdoptionSwapRequest_Handler,
		},
		{
			MethodName: "RejectionSwapRequest",
			Handler:    _Swaps_RejectionSwapRequest_Handler,
		},
		{
			MethodName: "GetAllSwapRequests",
			Handler:    _Swaps_GetAllSwapRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swaps.proto",
}
