// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: users.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UsersService_Register_FullMethodName               = "/users.UsersService/Register"
	UsersService_Login_FullMethodName                  = "/users.UsersService/Login"
	UsersService_GetProfile_FullMethodName             = "/users.UsersService/GetProfile"
	UsersService_UpdateProfile_FullMethodName          = "/users.UsersService/UpdateProfile"
	UsersService_DeleteProfile_FullMethodName          = "/users.UsersService/DeleteProfile"
	UsersService_GetAllUsers_FullMethodName            = "/users.UsersService/GetAllUsers"
	UsersService_ResetPassword_FullMethodName          = "/users.UsersService/ResetPassword"
	UsersService_UpdateToken_FullMethodName            = "/users.UsersService/UpdateToken"
	UsersService_CancelToken_FullMethodName            = "/users.UsersService/CancelToken"
	UsersService_GetEcoPointsByUser_FullMethodName     = "/users.UsersService/GetEcoPointsByUser"
	UsersService_CreateEcoPointsByUser_FullMethodName  = "/users.UsersService/CreateEcoPointsByUser"
	UsersService_HistoryEcoPointsByUser_FullMethodName = "/users.UsersService/HistoryEcoPointsByUser"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	Register(ctx context.Context, in *UserRegister, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*Token, error)
	GetProfile(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserInfo, error)
	UpdateProfile(ctx context.Context, in *ProfileUpdate, opts ...grpc.CallOption) (*UpdateResponse, error)
	DeleteProfile(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Status, error)
	GetAllUsers(ctx context.Context, in *FilterField, opts ...grpc.CallOption) (*Users, error)
	ResetPassword(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Status, error)
	UpdateToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*NewToken, error)
	CancelToken(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Status, error)
	GetEcoPointsByUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserEcoPoints, error)
	CreateEcoPointsByUser(ctx context.Context, in *CreateEcoPoints, opts ...grpc.CallOption) (*InfoUserEcoPoints, error)
	HistoryEcoPointsByUser(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*Histories, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) Register(ctx context.Context, in *UserRegister, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, UsersService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Login(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*Token, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Token)
	err := c.cc.Invoke(ctx, UsersService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetProfile(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UsersService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateProfile(ctx context.Context, in *ProfileUpdate, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteProfile(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, UsersService_DeleteProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetAllUsers(ctx context.Context, in *FilterField, opts ...grpc.CallOption) (*Users, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Users)
	err := c.cc.Invoke(ctx, UsersService_GetAllUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ResetPassword(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, UsersService_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*NewToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewToken)
	err := c.cc.Invoke(ctx, UsersService_UpdateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CancelToken(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, UsersService_CancelToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetEcoPointsByUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserEcoPoints, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserEcoPoints)
	err := c.cc.Invoke(ctx, UsersService_GetEcoPointsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateEcoPointsByUser(ctx context.Context, in *CreateEcoPoints, opts ...grpc.CallOption) (*InfoUserEcoPoints, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoUserEcoPoints)
	err := c.cc.Invoke(ctx, UsersService_CreateEcoPointsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) HistoryEcoPointsByUser(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*Histories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Histories)
	err := c.cc.Invoke(ctx, UsersService_HistoryEcoPointsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	Register(context.Context, *UserRegister) (*RegisterResponse, error)
	Login(context.Context, *UserLogin) (*Token, error)
	GetProfile(context.Context, *UserId) (*UserInfo, error)
	UpdateProfile(context.Context, *ProfileUpdate) (*UpdateResponse, error)
	DeleteProfile(context.Context, *UserId) (*Status, error)
	GetAllUsers(context.Context, *FilterField) (*Users, error)
	ResetPassword(context.Context, *Email) (*Status, error)
	UpdateToken(context.Context, *RefreshToken) (*NewToken, error)
	CancelToken(context.Context, *Void) (*Status, error)
	GetEcoPointsByUser(context.Context, *UserId) (*UserEcoPoints, error)
	CreateEcoPointsByUser(context.Context, *CreateEcoPoints) (*InfoUserEcoPoints, error)
	HistoryEcoPointsByUser(context.Context, *HistoryReq) (*Histories, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) Register(context.Context, *UserRegister) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUsersServiceServer) Login(context.Context, *UserLogin) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsersServiceServer) GetProfile(context.Context, *UserId) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUsersServiceServer) UpdateProfile(context.Context, *ProfileUpdate) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedUsersServiceServer) DeleteProfile(context.Context, *UserId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedUsersServiceServer) GetAllUsers(context.Context, *FilterField) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUsersServiceServer) ResetPassword(context.Context, *Email) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUsersServiceServer) UpdateToken(context.Context, *RefreshToken) (*NewToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedUsersServiceServer) CancelToken(context.Context, *Void) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelToken not implemented")
}
func (UnimplementedUsersServiceServer) GetEcoPointsByUser(context.Context, *UserId) (*UserEcoPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEcoPointsByUser not implemented")
}
func (UnimplementedUsersServiceServer) CreateEcoPointsByUser(context.Context, *CreateEcoPoints) (*InfoUserEcoPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEcoPointsByUser not implemented")
}
func (UnimplementedUsersServiceServer) HistoryEcoPointsByUser(context.Context, *HistoryReq) (*Histories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryEcoPointsByUser not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Register(ctx, req.(*UserRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Login(ctx, req.(*UserLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetProfile(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateProfile(ctx, req.(*ProfileUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteProfile(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetAllUsers(ctx, req.(*FilterField))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ResetPassword(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateToken(ctx, req.(*RefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CancelToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CancelToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CancelToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CancelToken(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetEcoPointsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetEcoPointsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetEcoPointsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetEcoPointsByUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateEcoPointsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEcoPoints)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateEcoPointsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreateEcoPointsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateEcoPointsByUser(ctx, req.(*CreateEcoPoints))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_HistoryEcoPointsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).HistoryEcoPointsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_HistoryEcoPointsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).HistoryEcoPointsByUser(ctx, req.(*HistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UsersService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UsersService_Login_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _UsersService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _UsersService_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _UsersService_DeleteProfile_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UsersService_GetAllUsers_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UsersService_ResetPassword_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _UsersService_UpdateToken_Handler,
		},
		{
			MethodName: "CancelToken",
			Handler:    _UsersService_CancelToken_Handler,
		},
		{
			MethodName: "GetEcoPointsByUser",
			Handler:    _UsersService_GetEcoPointsByUser_Handler,
		},
		{
			MethodName: "CreateEcoPointsByUser",
			Handler:    _UsersService_CreateEcoPointsByUser_Handler,
		},
		{
			MethodName: "HistoryEcoPointsByUser",
			Handler:    _UsersService_HistoryEcoPointsByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
