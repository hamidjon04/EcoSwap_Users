// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: recycling_center.proto

package recycling_center

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RecyclingCenter_CreateRecyclingCenter_FullMethodName = "/recycling_center.RecyclingCenter/CreateRecyclingCenter"
	RecyclingCenter_SearchRecyclingCenter_FullMethodName = "/recycling_center.RecyclingCenter/SearchRecyclingCenter"
	RecyclingCenter_ProductDelivery_FullMethodName       = "/recycling_center.RecyclingCenter/ProductDelivery"
	RecyclingCenter_GetStatistics_FullMethodName         = "/recycling_center.RecyclingCenter/GetStatistics"
)

// RecyclingCenterClient is the client API for RecyclingCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecyclingCenterClient interface {
	CreateRecyclingCenter(ctx context.Context, in *ResCenter, opts ...grpc.CallOption) (*ResponceResCenter, error)
	SearchRecyclingCenter(ctx context.Context, in *FilterField, opts ...grpc.CallOption) (*ResAllCenter, error)
	ProductDelivery(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*SubmissionResp, error)
	GetStatistics(ctx context.Context, in *StatisticField, opts ...grpc.CallOption) (*Statistics, error)
}

type recyclingCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewRecyclingCenterClient(cc grpc.ClientConnInterface) RecyclingCenterClient {
	return &recyclingCenterClient{cc}
}

func (c *recyclingCenterClient) CreateRecyclingCenter(ctx context.Context, in *ResCenter, opts ...grpc.CallOption) (*ResponceResCenter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponceResCenter)
	err := c.cc.Invoke(ctx, RecyclingCenter_CreateRecyclingCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recyclingCenterClient) SearchRecyclingCenter(ctx context.Context, in *FilterField, opts ...grpc.CallOption) (*ResAllCenter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAllCenter)
	err := c.cc.Invoke(ctx, RecyclingCenter_SearchRecyclingCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recyclingCenterClient) ProductDelivery(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*SubmissionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmissionResp)
	err := c.cc.Invoke(ctx, RecyclingCenter_ProductDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recyclingCenterClient) GetStatistics(ctx context.Context, in *StatisticField, opts ...grpc.CallOption) (*Statistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Statistics)
	err := c.cc.Invoke(ctx, RecyclingCenter_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecyclingCenterServer is the server API for RecyclingCenter service.
// All implementations must embed UnimplementedRecyclingCenterServer
// for forward compatibility
type RecyclingCenterServer interface {
	CreateRecyclingCenter(context.Context, *ResCenter) (*ResponceResCenter, error)
	SearchRecyclingCenter(context.Context, *FilterField) (*ResAllCenter, error)
	ProductDelivery(context.Context, *Submission) (*SubmissionResp, error)
	GetStatistics(context.Context, *StatisticField) (*Statistics, error)
	mustEmbedUnimplementedRecyclingCenterServer()
}

// UnimplementedRecyclingCenterServer must be embedded to have forward compatible implementations.
type UnimplementedRecyclingCenterServer struct {
}

func (UnimplementedRecyclingCenterServer) CreateRecyclingCenter(context.Context, *ResCenter) (*ResponceResCenter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecyclingCenter not implemented")
}
func (UnimplementedRecyclingCenterServer) SearchRecyclingCenter(context.Context, *FilterField) (*ResAllCenter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecyclingCenter not implemented")
}
func (UnimplementedRecyclingCenterServer) ProductDelivery(context.Context, *Submission) (*SubmissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDelivery not implemented")
}
func (UnimplementedRecyclingCenterServer) GetStatistics(context.Context, *StatisticField) (*Statistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedRecyclingCenterServer) mustEmbedUnimplementedRecyclingCenterServer() {}

// UnsafeRecyclingCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecyclingCenterServer will
// result in compilation errors.
type UnsafeRecyclingCenterServer interface {
	mustEmbedUnimplementedRecyclingCenterServer()
}

func RegisterRecyclingCenterServer(s grpc.ServiceRegistrar, srv RecyclingCenterServer) {
	s.RegisterService(&RecyclingCenter_ServiceDesc, srv)
}

func _RecyclingCenter_CreateRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCenter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecyclingCenterServer).CreateRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecyclingCenter_CreateRecyclingCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecyclingCenterServer).CreateRecyclingCenter(ctx, req.(*ResCenter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecyclingCenter_SearchRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecyclingCenterServer).SearchRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecyclingCenter_SearchRecyclingCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecyclingCenterServer).SearchRecyclingCenter(ctx, req.(*FilterField))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecyclingCenter_ProductDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecyclingCenterServer).ProductDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecyclingCenter_ProductDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecyclingCenterServer).ProductDelivery(ctx, req.(*Submission))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecyclingCenter_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecyclingCenterServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecyclingCenter_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecyclingCenterServer).GetStatistics(ctx, req.(*StatisticField))
	}
	return interceptor(ctx, in, info, handler)
}

// RecyclingCenter_ServiceDesc is the grpc.ServiceDesc for RecyclingCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecyclingCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recycling_center.RecyclingCenter",
	HandlerType: (*RecyclingCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecyclingCenter",
			Handler:    _RecyclingCenter_CreateRecyclingCenter_Handler,
		},
		{
			MethodName: "SearchRecyclingCenter",
			Handler:    _RecyclingCenter_SearchRecyclingCenter_Handler,
		},
		{
			MethodName: "ProductDelivery",
			Handler:    _RecyclingCenter_ProductDelivery_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _RecyclingCenter_GetStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recycling_center.proto",
}
